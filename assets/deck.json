{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "399e6dd2-ba16-11ed-859c-04d9f5827032",
    "deck_config_uuid": "399e6dd3-ba16-11ed-a70e-04d9f5827032",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "399e6dd3-ba16-11ed-a70e-04d9f5827032",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 20
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 200
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "JS Knowledge Check",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "description": "",
                    "font": "Arial",
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "Name the 3 ways to declare a variable.",
                "var<br>let<br>const"
            ],
            "guid": "ehx7QH>oP1",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Which of the 3 variable declarations should you avoid and why?",
                "var, legacy way, function scoped but can be global variable - can mess with code use const or let instead"
            ],
            "guid": "Pr`6{d<a5_",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What rules should you follow when naming variables?",
                "Simple, Concise, meaningful description\n<br>does not start with a 0\n<br>does not use special characters except $ and _ , can be letters and numbers\ndoes not use pre-determined words in JS that are assigned already\n<br>camelCase\n<br>Case Sensitive"
            ],
            "guid": "PaHF0j3~.A",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "what happens when you add numbers and strings together?",
                "string+number = conc\n<br>string+string = conc\n<br>number+string = conc\n<br>number+number= addition"
            ],
            "guid": "PlWf&t+XqG",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How does the modulo % or remainder operator work?",
                "will print only the remainder"
            ],
            "guid": "HjsB,-l_pW",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "explain the difference between == and ===",
                "== equality operator, is equal to used to compare equal values and convert types together, will return true (will type match and convert)\n<br><br>=== strict equality operator, is is not equal to will return false (will not type convertm checks to see if BOTH value and type match)<br><br>Type being strings number boolean etc"
            ],
            "guid": "C?M{#xCq)^",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "when would you receive a NaN result?",
                "When the result is not a number"
            ],
            "guid": "F(bR2K_!ga",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "how do you increment and decrement a number?",
                "using ++ or  - - before"
            ],
            "guid": "f`-p.p+N9Q",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "explain the difference between prefixing and postfixing increments/decrement operators",
                "The difference between prefixing and postfixing the operators is the order in which the operand is incremented or decremented, and the value that is returned. <br><br><br>Prefixing the increment operator (++x) means that the operand is incremented before the value is returned (Fetch in memory data)<br><br><br>Postfixing the increment operator (x++) means that the operand is incremented after the value is returned. (Fetch in memory data)"
            ],
            "guid": "Pj{MW[c7t4",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "what is operator precedence and how is it handled in JS?",
                "operator precedence is the arithmetic order that JS will execute, it is similar to the normal laws of math, to check the values you can look up the documents&nbsp; (), exponents, ++ or - -, + - (unary), multi, division, remainder, add, subtraction, &lt; &gt; ≤ ≥"
            ],
            "guid": "km|)B!:c59",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you access dev tools and the console?",
                "right click &gt; inspect &gt;console"
            ],
            "guid": "QD@$PAR(+|",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you log info to the console?",
                "console.log();"
            ],
            "guid": "n1pflE}lvn",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "what does the unary plus operator do to string rep of integers eg +”10”?",
                "used to convert the operator into a number"
            ],
            "guid": "Lxs]<E7IWO",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the eight data types in JS?&nbsp;",
                "Numbers, Booleans, Arrays, Functions, Undefined, Null, Strings, BigInt, Objects, Symbol"
            ],
            "guid": "uzq$&@P5X4",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Which data type is NOT primitive?",
                "Objects &lt;- [Functions, Arrays]"
            ],
            "guid": "k9_D:Fsmbt",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the relationship between null and undefined?",
                "null is nothing, or not a value, can be used as a placeholder\nundefined is a variable thats not assigned"
            ],
            "guid": "rX188{Bt9.",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the difference between single, double, and backtick quotes for strings?",
                "singe and double are the same thing, backtick is used to embed into string literals"
            ],
            "guid": "C]szLYY?!f",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you embed variables/expressions in a string?",
                "back tick and ${…}"
            ],
            "guid": "P-1ix$X)mF",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you escape characters in a string?",
                "\\"
            ],
            "guid": "B-e0%X^^U%",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the difference between the substring/slice/substr string methods?",
                "substring - similar to slice but does not accept negative<br><br>slice- extracts a portion of a string started at the start index, and ending at the end, if it is negative starts at the end<br><br><br>substr - extracts a portion of a string, started at start index, and including length of characters for 2nd value"
            ],
            "guid": "HNz%LF`E__",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the three logical operators and what do they stand for?",
                "! - not comparison - checks if values do not equal\n<br>&amp;&amp; - and comparison - checks if both are true<br>&nbsp;| | - or comparison - checks if one is true"
            ],
            "guid": "DaA]h1coAm",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the equality and comparison operators?&nbsp;",
                "Equality Ops<br><b>! = = -</b> strict inequality operator\n<br>! = - inequality operator\n<br>= = = - strict equal to without type conversion\n<br>= = - equality operator  to with type conversion<br><br>Comparison Ops<br><span style=\"font-weight: 600;\">&gt; = -</span> greater than or equal to\n<br>&lt; = - less than or equal to\n<br>&lt; - less than\n<br>&gt; - greater than"
            ],
            "guid": "2C2I6M%S_",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are truthy and falsy values?",
                "falsy values are: 0, null, undefined, Nan  “ “ (empty string), false\neverything else is truthy"
            ],
            "guid": "E+}yN/eR,;",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are conditionals?",
                "they are like branching statements: if, if-else, and switch statements"
            ],
            "guid": "JX,bg-CN!%",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is nesting?",
                "placing one code block within another."
            ],
            "guid": "LU5l)`I4Oj",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are functions useful for?",
                "useful for creating your own functions for logic that can be re-used and called upon"
            ],
            "guid": "ivAevdo2,4",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you invoke a function?",
                "using a function syntax: function ()"
            ],
            "guid": "d!O-`^q1FE",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::Syntax"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are anonymous functions?",
                "don’t have an identifier name, often used in shorthand function writing like the arrow functions"
            ],
            "guid": "p6Q5(:`&0X",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a function scope?",
                "the scope of a function refers to the visibility/accessibility of variables within that function, variables that are defined within a function are only accessible within that function (can have nested as well), and are not visible/accessible from outside the function aka local scope"
            ],
            "guid": "PI3bEU+Z&U",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are return values?",
                "values that are returned when a function is called"
            ],
            "guid": "tUZGMXKsPx",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are arrow functions",
                "arrow functions are a shorthand way of writing functions using the ⇒"
            ],
            "guid": "hM4Wtx9_|v",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are arrays useful for?",
                "arrays are useful for keeping track and organizing lists of data"
            ],
            "guid": "EF8V}p#GUM",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you access an array element?",
                "by calling on the array, array[index]<span style=\"font-weight:600\"></span>"
            ],
            "guid": "lPw(w@9Hp#",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you change an array element?",
                "using various array string methods of array<span style=\"font-weight:600\">\n</span>ex: array[index] = new value"
            ],
            "guid": "nG=F+i[Ht6",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are some useful array properties?&nbsp;",
                "<span style=\"font-weight:600\">.</span>length, .isArray, .prototype"
            ],
            "guid": "I;M:&3D&c?",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are some useful array methods?",
                "filter, reduce, map, substring, slice, substr, sort, pop, shift, unshift"
            ],
            "guid": "jSEryHW{G>",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are loops useful for?",
                "Looping an action multiple times until a certain condition is met"
            ],
            "guid": "eOxs)5KuGe",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the break statement?",
                "creates a break in the code to stop and return at that moment (exit the loop early)"
            ],
            "guid": "MIVKbD?-!",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the continue statement?",
                "to skip the current iteration of a loop and move on to the next iteration"
            ],
            "guid": "kH^[z[9~C]",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the advantage of writing automated tests (Test Driven Development)?",
                "helps write more bug free code, and ensure the code you write don’t break existing functionality and make dev process more efficient"
            ],
            "guid": "ch{SAb/EKU",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::KnowledgeCheck"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you target the nodes you want to work with?",
                "To target nodes in the DOM, developers can use methods such as <span style=\"font-weight: 600;\">getElementById</span>, <span style=\"font-weight: 600;\">querySelector</span>, and <span style=\"font-weight: 600;\">querySelectorAll</span> to select specific elements.<br><br>Example:<br>// Get an element by its id<br>const element = document.getElementById(\"myId\");<br><br>// Select the first element that matches a CSS selector<br>const element = document.querySelector(\".myClass\");<br><br>// Select all elements that match a CSS selector<br>const elements = document.querySelectorAll(\".myClass\");<br><br>Note: querySelector and querySelectorAll does not need the class/ID selection . or # within its quotes<br>but for getElementByClassName or getElementById it must be included"
            ],
            "guid": "k9s4#:a|4_",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you create an element in the DOM?",
                "To create an element in the DOM, developers can use the <span style=\"font-weight: 600;\">document.createElement</span> method to create a new element, and set its properties and attributes as needed."
            ],
            "guid": "Na]5F}ua>J",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you add an element to the DOM?",
                "To add an element to the DOM, developers can use methods such as <span style=\"font-weight: 600;\">appendChild</span>, <span style=\"font-weight: 600;\">prepend</span>, and <span style=\"font-weight: 600;\">insertBefore</span> to insert the element into the desired location in the tree structure of the webpage.<br><br>Example: Best Practice<br>let parent = document.getElementById(\"parent\");<br>let newElement = document.createElement(\"new-element\");<br>parent.appendChild(newElement);"
            ],
            "guid": "I.skl0<tVt",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you remove an element from the DOM?",
                "To remove an element from the DOM, developers can use the <span style=\"font-weight: 600;\">removeChild </span>or <span style=\"font-weight: 600;\">remove </span>method to remove the element from its parent node.<br>Example: Best practice&nbsp;<br>let element = document.getElementById(\"element\");<br>element.remove(); // nothing goes into the ()<br><br>or&nbsp;<br><br>let parent = document.getElementById(\"parent\");<br>let child = document.getElementById(\"child\");<br>parent.removeChild(child);<br>"
            ],
            "guid": "bjPf^kJf{N",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How can you alter an element in the DOM?",
                "To alter an element in the DOM, developers can use methods such as <span style=\"font-weight: 600;\">setAttribute</span> and <span style=\"font-weight: 600;\">style (other examples: textContent, innherHTML, etc)</span>&nbsp;to change the element's properties and attributes."
            ],
            "guid": "C7MU>MFExu",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When adding text to a DOM element, should you use textContent or innerHTML? Why?",
                "When adding text to a DOM element, it is generally recommended to use the <span style=\"font-weight: 600;\">textContent</span> property, as it is faster and more secure than using <span style=\"font-weight: 600;\">innerHTML</span>."
            ],
            "guid": "eQiZVkPbG@",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Where should you include your JavaScript tag in your HTML file when working with DOM nodes?",
                "JavaScript tags should be included at the bottom of the HTML file, as it allows the browser to render the page before executing the JavaScript. There are other methods like adding async to script tag or defer but best practice is bottom of body"
            ],
            "guid": "DX.;dqRr*r",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do “events” and “listeners” work?",
                "Events are actions or occurrences that happen in the browser, such as a button being clicked or a page finishing loading. Listeners are functions that are called in response to an event occurring."
            ],
            "guid": "m%zGX[VCW=",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are three ways to use events in your code?",
                "There are three ways to use events in code: inline event handlers, traditional event listeners, and event delegation.<br><br>Inline Event Handlers: You can add event handlers directly to the HTML elements using the attributes such as onclick, onmouseover, etc.<br>DOM Level 0 Event Handlers: You can assign event handlers to elements using the properties of the DOM such as element.onclick = function(){...}<br>DOM Level 2 Event Handlers: This is the recommended way of adding event handlers, using addEventListener or attachEvent.<br><br>Event listeners are preferred because they separate the event handling logic from the HTML, allow for multiple functions to handle the same event, and make it easier to add and remove event handlers."
            ],
            "guid": "H<U9~<m(0E",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the benefits of using named functions in your listeners?",
                "Benefits of using named functions in listeners include: better readability, easier debugging, and the ability to remove or change the function later on."
            ],
            "guid": "MqmWsSWy:d",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you attach listeners to groups of nodes?",
                "loops or foreach method or querySelectorAll<br><br>Example:<br><div>const buttons = document.querySelectorAll('button');</div><div>buttons.forEach(button =&gt; button.addEventListener('click', () =&gt; console.log('Button clicked!')));</div><div><br>Note: querySelector and querySelectorAll does not need the class/ID selection . or # within its quotes<br>but for getElementByClassName or getElementById it must be included</div>"
            ],
            "guid": "v}byp/5:n@",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the difference between the return values of querySelector and querySelectorAll?",
                "querySelector returns the first element that matches the given CSS selector, while querySelectorAll returns a NodeList of all elements that match the given selector.<br><br>Note: querySelector and querySelectorAll does not need the class/ID selection . or # within its quotes<br>but for getElementByClassName or getElementById it must be included"
            ],
            "guid": "yOW]>B1|QE",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What does a “nodelist” contain?",
                "A nodelist contains a list of nodes, which are items within the DOM. Nodelists can be created using methods such as <span style=\"font-weight: 600;\">querySelectorAll</span>, <span style=\"font-weight: 600;\">getElementsByTagName</span>, and <span style=\"font-weight: 600;\">childNodes</span>.<br><br>Note: querySelector and querySelectorAll does not need the class/ID selection . or # within its quotes<br>but for getElementByClassName or getElementById it must be included"
            ],
            "guid": "GtmKQC[hz<",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "Explain the difference between “capture” and “bubbling”.",
                "In event propagation, there are two phases: the capturing phase and the bubbling phase. In the capturing phase, the event is first captured by the outermost element and propagates inward. In the bubbling phase, the event is first captured by the innermost element and propagates outward. So, \"capture\" means the event is captured from outermost element to innermost element, and \"bubbling\" means the event is propagated from innermost element to outermost element.<br><br>they are separate phases in event propagation. When an event is triggered, first it will start with the capturing phase and travel down the DOM tree towards the target element. Then, once it reaches the target element, it will trigger the bubbling phase and travel back up the DOM tree towards the outer most parent element. Both phases occur when an event is triggered, and developers can choose to handle events in either the capturing phase or the bubbling phase, or both, depending on the needs of their application."
            ],
            "guid": "KsVY*r]g^L",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": [
                "JS::DOM"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the difference between objects and arrays?",
                "The difference between objects and arrays is that objects store collections of key-value pairs, whereas arrays store collections of values in an ordered list. Objects use keys (strings or symbols) to access values, whereas arrays use indices (numbers) to access values."
            ],
            "guid": "G_^s{W&`G;",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How do you access object properties?",
                "To access object properties, you can use the dot notation (object.property) or the bracket notation (object[\"property\"])."
            ],
            "guid": "e[)E9kMhhy",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is array.prototype.map() useful for?",
                "is a useful method in JavaScript that allows you to apply a transformation to each element of an array and return a new array with the transformed elements. It's useful when you want to create a new array based on an existing array, but with some changes."
            ],
            "guid": "b^GWavf~J,",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is array.prototype.reduce() useful for?",
                "is a method in JavaScript that allows you to reduce an array to a single value. It works by applying a function to each element of the array, accumulating the result along the way, and returning the final value. It's useful when you want to process an array and create a single value that summarizes the data in some way."
            ],
            "guid": "rqJ%tBd$mG",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is back-end development?",
                "Back-end development refers to the server-side of web development where the developer creates and manages the technology that powers the backend of a website or application. It is responsible for server-side scripting, database management, and APIs to provide a seamless experience for the front-end."
            ],
            "guid": "cj:F!(Oe}Q",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How many parts does the backend consist of?",
                "The backend typically consists of three parts: a server, an application, and a database."
            ],
            "guid": "Kxgw&}lj#?",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Name each part of the backend.",
                "<span style=\"font-weight:600\">Server</span>: A computer program that manages access to a centralized resource or service in a network, allows you to connect to API's in order to fetch Data<br><span style=\"font-weight:600\"><br>Application</span>: A program or group of programs designed for end users.&nbsp;<br><br><b>Database</b>: An organized collection of data stored and accessed electronically."
            ],
            "guid": "wNlNZ<^Fu[",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Where does the backend store its data?",
                "The back-end stores its data in a database, which can be either a relational database (such as MySQL or PostgreSQL) or a NoSQL database (such as MongoDB or Cassandra)."
            ],
            "guid": "kgV_Il((c$",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What problems do frameworks solve?",
                "Web frameworks solve problems with code organization, handling common tasks, scalability, and security in web development."
            ],
            "guid": "Es}pwY3Iv!",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Name some popular front-end and back-end frameworks.",
                "Popular front-end frameworks include React.js, Angular.js, Vue.js, and Ember.js. Popular back-end frameworks include Django, Ruby on Rails, and Express."
            ],
            "guid": "JU5Wohc|^U",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Describe the process of choosing a framework.",
                "Choosing a framework involves considering factors such as ease of use, performance, scalability, and security. It also depends on the requirements of the project, the programming language, and personal preferences of the developer."
            ],
            "guid": "Dr^T^9f(-%",
            "note_model_uuid": "399e8208-ba16-11ed-9d8f-04d9f5827032",
            "tags": []
        }
    ],
    "reviewLimit": null,
    "reviewLimitToday": null
}